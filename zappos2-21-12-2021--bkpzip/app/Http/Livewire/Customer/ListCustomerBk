<?php



namespace App\Http\Livewire\Customer;

use App\Exports\CustomersExport;

use App\Models\Country;

use App\Models\Filter;

use App\Models\User;

use App\Models\CustomerDetail;

use Carbon\Carbon;

use Carbon\Language;

use Illuminate\Support\Facades\Auth;

use Livewire\Component;

use Maatwebsite\Excel\Facades\Excel;



class ListCustomers extends Component

{
    
    public $customers, $email_status, $tagged_with, $account_status, $amount_spent, $number_of_orders, $filter_customers,

        $date_of_order, $date_added_as_customer, $abandoned_checkout, $customer_language, $location, $countries, $save_filter,

        $filter_tabs, $active_tab, $sort_by, $export, $export_as;

    public $filter = [], $languages = [];



    public function mount()

    {

        $this->active_tab = 'All';
        $this->export = 'Current Page';
        $this->export_as = 'Csv';

        $this->getFilters();

        $this->getCustomers();

        $this->getCountries();

        $this->getLanguages();

    }



    public function render()

    {

        $this->getCustomers();

        return view('livewire.customer.list-customers');

    }



    public function getCustomers()

    {

        $this->filter = [];



        $this->customers = User::with(['detail', 'address'])->when($this->email_status, function ($query, $email_status) {

            $this->filter[0] = $email_status;


            if ($email_status == 'Subscribed') {

                $query->whereHas('detail', function ($q) {

                    return $q->where('agreed_to_receive_marketing_mails', 'yes');

                });

            } elseif ($email_status == 'Not subscribed') {

                $query->whereHas('detail', function ($q) {

                    return $q->where('agreed_to_receive_marketing_mails', 'no');

                });

            }



        })->when($this->tagged_with, function ($query, $tagged_with) {

            $tagged_with = trim($tagged_with);

            $query->whereHas('detail', function ($q) use ($tagged_with) {

                return $q->where('tags', 'LIKE', '%' . $tagged_with . ',%');

            });



            $this->filter[1] = $tagged_with;



        })->when($this->account_status, function ($query, $account_status) {



            $this->filter[2] = $account_status;



            if ($account_status == 'Disabled account') {

                $query->onlyTrashed();

            } else {

                if ($account_status == 'Active account') $query->where('status', 'active');

                if ($account_status == 'Disabled account') $query->where('status', 'disabled');

                if ($account_status == 'Invited to create account') $query->where('status', 'invited');

                if ($account_status == 'Declined account invitation') $query->where('status', 'declined');

            }



        })->when($this->customer_language, function ($query, $customer_language) {



            $this->filter[3] = 'Shops in ' . $customer_language;



        })->when($this->amount_spent, function ($query, $amount_spent) {



            $this->filter[4] = $amount_spent;



        })->when($this->number_of_orders, function ($query, $number_of_orders) {



            $this->filter[5] = $number_of_orders;



        })->when($this->date_of_order, function ($query, $date_of_order) {



            $this->filter[6] = 'Ordered in last  ' . $date_of_order;



        })->when($this->date_added_as_customer, function ($query, $date_added_as_customer) {



            $this->filter[7] = 'Customer added in last ' . $date_added_as_customer;

            $days = explode(' ', $date_added_as_customer);

            if ($days[1] == "month") {

                $query->whereDate('created_at', '>', Carbon::now()->subMonths($days[0])->toDateString());

            }

            if ($days[1] == "days") {

                $query->whereDate('created_at', '>', Carbon::now()->subDays($days[0])->toDateString());

            }



        })->when($this->abandoned_checkout, function ($query, $abandoned_checkout) {



            $this->filter[8] = 'Abandoned checkout in last  ' . $abandoned_checkout;



        })->when($this->location, function ($query, $location) {



            $this->filter[9] = 'From ' . $location;

            $query->whereHas('address', function ($q) use ($location) {

                return $q->where('country', $location)->where('address_type', 'shipping_address');

            });



        })->when($this->filter_customers, function ($query, $filter_customers) {



            $query->where('first_name', 'LIKE', '%' . $filter_customers . '%')->orWhere('last_name', 'LIKE', '%' . $filter_customers . '%')->orWhere('mobile_number', 'LIKE', '%' . $filter_customers . '%')->orWhere('email', 'LIKE', '%' . $filter_customers . '%')

                ->orWhereHas('address', function ($q) use ($filter_customers) {

                    return $q->where('address_type', 'shipping_address')->where(function ($qu) use ($filter_customers) {

                        $qu->where('country', 'LIKE', '%' . $filter_customers . '%')->orWhere('city', 'LIKE', '%' . $filter_customers . '%');

                    });

                });



        })->when($this->sort_by, function ($query, $sort_by) {



            if ($sort_by == 'UPDATED_AT+desc') {

                return $query->orderBy('updated_at', 'desc');



            } elseif ($sort_by == 'UPDATED_AT+asc') {

                return $query->orderBy('updated_at', 'asc');



            } elseif ($sort_by == 'CREATED_AT+desc') {

                return $query->orderBy('created_at', 'desc');



            } elseif ($sort_by == 'CREATED_AT+asc') {

                return $query->orderBy('created_at', 'asc');



            }



        })->role('customer')->orderBy('updated_at', 'desc')->get();



    }



    public function getCountries()

    {

        $this->countries = Country::all();

    }



    public function getLanguages()

    {

        $this->languages = Language::all();

    }

    public function show($page, $customer=null)

    {

        $this->emit('openPage', $page, $customer);

    }



    public function saveFilter($mode)

    {

        if ($mode == 'create') {

            Filter::create([

                'user_id' => Auth::user()->id,

                'name' => $this->save_filter,

                'data' => json_encode($this->filter)

            ]);

            $this->active_tab = $this->save_filter;

        } else {

            $filter = Filter::where('user_id', Auth::user()->id)->where('name', $this->active_tab)->first();

            $filter->update(['name' => $this->save_filter]);

            $this->active_tab = $this->save_filter;

        }



        $this->getFilters();

    }



    public function getFilters()

    {

        $this->filter_tabs = Filter::where('user_id', Auth::user()->id)->get();

    }



    public function cancelFilter()

    {

        $this->save_filter = null;

    }



    public function removeFilter($key)

    {

        switch ($key) {

            case 0:

                $this->email_status = null;

            case 1:

                $this->tagged_with = null;

            case 2:

                $this->account_status = null;

            case 3:

                $this->customer_language = null;

            case 4:

                $this->amount_spent = null;

            case 5:

                $this->number_of_orders = null;

            case 6:

                $this->date_of_order = null;

            case 7:

                $this->date_added_as_customer = null;

            case 8:

                $this->abandoned_checkout = null;

            case 9:

                $this->location = null;

        }



        unset($this->filter[$key]);

    }



    public function activeTab($tab)

    {

        $this->active_tab = $tab['name'];

        $tab['data'] = json_decode($tab['data'], true);

        $this->removeAllFilters();

        foreach ($tab['data'] as $key => $value) {

            switch ($key) {

                case 0:

                    if (isset($tab['data'][0])) $this->email_status = $tab['data'][0];

                case 1:

                    if (isset($tab['data'][1])) $this->tagged_with = $tab['data'][1];

                case 2:

                    if (isset($tab['data'][2])) $this->account_status = $tab['data'][2];

                case 3:

                    if (isset($tab['data'][3])) $this->customer_language = $tab['data'][3];

                case 4:

                    if (isset($tab['data'][4])) $this->amount_spent = $tab['data'][4];

                case 5:

                    if (isset($tab['data'][5])) $this->number_of_orders = $tab['data'][5];

                case 6:

                    if (isset($tab['data'][6])) $this->date_of_order = $tab['data'][6];

                case 7:

                    if (isset($tab['data'][7])) $this->date_added_as_customer = $tab['data'][7];

                case 8:

                    if (isset($tab['data'][8])) $this->abandoned_checkout = $tab['data'][8];

                case 9:

                    if (isset($tab['data'][9])) $this->location = $tab['data'][9];

            }

        }

        $this->save_filter = $tab['name'];





    }



    public function removeTab()

    {

        Filter::where('name', $this->save_filter)->where('user_id', Auth::user()->id)->delete();

        $this->removeAllFilters();

        $this->cancelFilter();

        $this->getFilters();

    }



    public function removeAllFilters()

    {

        $this->filter = [];

        $this->email_status = null;

        $this->tagged_with = null;

        $this->account_status = null;

        $this->customer_language = null;

        $this->amount_spent = null;

        $this->number_of_orders = null;

        $this->date_of_order = null;

        $this->date_added_as_customer = null;

        $this->abandoned_checkout = null;

        $this->location = null;

    }

    public function exportCustomers() 
    {
        return Excel::download(new CustomersExport, 'customers.xlsx');
    }


}

